#! /usr/bin/env python
"""
Utility to identify, download and process MODSCAG fractional snow-covered area (fSCA) to match an input raster

"""
import sys
import os
import subprocess
import argparse

from osgeo import gdal, ogr, osr
import numpy as np

from datetime import datetime, timedelta

from pygeotools.lib import iolib
from pygeotools.lib import warplib
from pygeotools.lib import geolib
from pygeotools.lib import timelib

def get_modis_tile_list(ds):
    """Helper function to identify MODIS tiles that intersect input geometry

    modis_gird.py contains dictionary of tile boundaries (tile name and WKT polygon ring from bbox)

    See: https://modis-land.gsfc.nasa.gov/MODLAND_grid.html
    """
    modis_dict={"h14v16": "POLYGON ((-180 -80,-180 -70,-87.6898 -70.0,-87.6898 -80.0,-180 -80))", "h14v17": "POLYGON ((-180.0 -80.4083,-180 -80,-172.7151 -80.0,-172.7151 -80.4083,-180.0 -80.4083))", "h14v14": "POLYGON ((-80 -60,-80 -50,-46.6588 -50.0,-46.6588 -60.0,-80 -60))", "h14v15": "POLYGON ((-116.9522 -70.0,-116.9522 -60.0,-59.9833 -60.0,-59.9833 -70.0,-116.9522 -70.0))", "h14v12": "POLYGON ((-52.2163 -40.0,-52.2163 -30.0,-34.6314 -30.0,-34.6314 -40.0,-52.2163 -40.0))", "h14v13": "POLYGON ((-62.229 -50.0,-62.229 -40.0,-39.1513 -40.0,-39.1513 -50.0,-62.229 -50.0))", "h14v10": "POLYGON ((-42.5671 -20.0,-42.5671 -10.0,-30.4543 -10.0,-30.4543 -20.0,-42.5671 -20.0))", "h14v11": "POLYGON ((-46.188 -30.0,-46.188 -20.0,-31.9165 -20.0,-31.9165 -30.0,-46.188 -30.0))", "h21v00": "POLYGON ((172.7631 80.0,172.7631 80.4083,180.0 80.4083,180 80,172.7631 80.0))", "h21v09": "POLYGON ((30 -10,30 0,40.6255 -0.0,40.6255 -10.0,30 -10))", "h21v08": "POLYGON ((30 0,30 10,40.6255 10.0,40.6255 -0.0,30 0))", "h00v08": "POLYGON ((-180 0,-180 10,-169.9917 10.0,-169.9917 -0.0,-180 0))", "h21v17": "POLYGON ((172.7631 -80.4083,172.7631 -80.0,180 -80,180.0 -80.4083,172.7631 -80.4083))", "h21v14": "POLYGON ((46.6717 -60.0,46.6717 -50.0,80.0167 -50.0,80.0167 -60.0,46.6717 -60.0))", "h20v09": "POLYGON ((20 -10,20 0,30.4713 -0.0,30.4713 -10.0,20 -10))", "h21v12": "POLYGON ((34.641 -40.0,34.641 -30.0,52.2272 -30.0,52.2272 -40.0,34.641 -40.0))", "h21v13": "POLYGON ((39.1622 -50.0,39.1622 -40.0,62.2419 -40.0,62.2419 -50.0,39.1622 -50.0))", "h21v10": "POLYGON ((30.4628 -20.0,30.4628 -10.0,42.576 -10.0,42.576 -20.0,30.4628 -20.0))", "h21v11": "POLYGON ((31.9253 -30.0,31.9253 -20.0,46.1976 -20.0,46.1976 -30.0,31.9253 -30.0))", "h20v02": "POLYGON ((40 60,40 70,87.7385 70.0,87.7385 60.0,40 60))", "h20v03": "POLYGON ((31.1145 50.0,31.1145 60.0,60.0167 60.0,60.0167 50.0,31.1145 50.0))", "h20v00": "POLYGON ((115.1754 80.0,115.1754 83.625,180.0 83.625,180 80,115.1754 80.0))", "h20v01": "POLYGON ((58.4761 70.0,58.4761 80.0,172.8111 80.0,172.8111 70.0,58.4761 70.0))", "h20v06": "POLYGON ((21.2836 20.0,21.2836 30.0,34.6506 30.0,34.6506 20.0,21.2836 20.0))", "h20v07": "POLYGON ((20.3085 10.0,20.3085 20.0,31.9342 20.0,31.9342 10.0,20.3085 10.0))", "h20v04": "POLYGON ((26.1081 40.0,26.1081 50.0,46.6847 50.0,46.6847 40.0,26.1081 40.0))", "h00v07": "POLYGON ((-180 10,-180.0 19.1917,-172.6141 19.1917,-172.6141 10.0,-180 10))", "h16v10": "POLYGON ((-21.2836 -20.0,-21.2836 -10.0,-10.1458 -10.0,-10.1458 -20.0,-21.2836 -20.0))", "h16v11": "POLYGON ((-23.094 -30.0,-23.094 -20.0,-10.6329 -20.0,-10.6329 -30.0,-23.094 -30.0))", "h16v12": "POLYGON ((-26.1081 -40.0,-26.1081 -30.0,-11.5374 -30.0,-11.5374 -40.0,-26.1081 -40.0))", "h16v13": "POLYGON ((-31.1145 -50.0,-31.1145 -40.0,-13.0432 -40.0,-13.0432 -50.0,-31.1145 -50.0))", "h16v14": "POLYGON ((-40 -60,-40 -50,-15.5443 -50.0,-15.5443 -60.0,-40 -60))", "h16v15": "POLYGON ((-58.4761 -70.0,-58.4761 -60.0,-19.9833 -60.0,-19.9833 -70.0,-58.4761 -70.0))", "h16v16": "POLYGON ((-115.1754 -80.0,-115.1754 -70.0,-29.2137 -70.0,-29.2137 -80.0,-115.1754 -80.0))", "h16v17": "POLYGON ((-180.0 -86.8167,-180 -80,-57.5397 -80.0,-57.5397 -86.8167,-180.0 -86.8167))", "h22v04": "POLYGON ((52.2163 40.0,52.2163 50.0,77.7992 50.0,77.7992 40.0,52.2163 40.0))", "h22v05": "POLYGON ((46.188 30.0,46.188 40.0,65.2812 40.0,65.2812 30.0,46.188 30.0))", "h22v06": "POLYGON ((42.5671 20.0,42.5671 30.0,57.7446 30.0,57.7446 20.0,42.5671 20.0))", "h22v07": "POLYGON ((40.6171 10.0,40.6171 20.0,53.2178 20.0,53.2178 10.0,40.6171 10.0))", "h22v01": "POLYGON ((116.9522 70.0,116.9522 77.1583,180.0 77.1583,180 70,116.9522 70.0))", "h11v08": "POLYGON ((-71.0799 -0.0,-71.0799 10.0,-59.9917 10.0,-59.9917 -0.0,-71.0799 -0.0))", "h11v09": "POLYGON ((-71.0799 -10.0,-71.0799 -0.0,-59.9917 -0.0,-59.9917 -10.0,-71.0799 -10.0))", "h10v12": "POLYGON ((-104.4326 -40.0,-104.4326 -30.0,-80.8194 -30.0,-80.8194 -40.0,-104.4326 -40.0))", "h10v13": "POLYGON ((-124.4579 -50.0,-124.4579 -40.0,-91.3676 -40.0,-91.3676 -50.0,-124.4579 -50.0))", "h11v04": "POLYGON ((-108.9007 40.0,-108.9007 50.0,-78.3136 50.0,-78.3136 40.0,-108.9007 40.0))", "h10v11": "POLYGON ((-92.376 -30.0,-92.376 -20.0,-74.4836 -20.0,-74.4836 -30.0,-92.376 -30.0))", "h11v02": "POLYGON ((-180 60,-180 70,-119.9833 70.0,-119.9833 60.0,-180 60))", "h22v09": "POLYGON ((40 -10,40 0,50.7798 -0.0,50.7798 -10.0,40 -10))", "h10v14": "POLYGON ((-160 -60,-160 -50,-108.8877 -50.0,-108.8877 -60.0,-160 -60))", "h10v15": "POLYGON ((-180.0 -67.1167,-180 -60,-139.9833 -60.0,-139.9833 -67.1167,-180.0 -67.1167))", "h23v10": "POLYGON ((50.7713 -20.0,50.7713 -10.0,63.8595 -10.0,63.8595 -20.0,50.7713 -20.0))", "h23v11": "POLYGON ((53.2089 -30.0,53.2089 -20.0,69.2917 -20.0,69.2917 -30.0,53.2089 -30.0))", "h23v12": "POLYGON ((57.735 -40.0,57.735 -30.0,78.3353 -30.0,78.3353 -40.0,57.735 -40.0))", "h23v13": "POLYGON ((65.2704 -50.0,65.2704 -40.0,93.3564 -40.0,93.3564 -50.0,65.2704 -50.0))", "h23v14": "POLYGON ((77.7862 -60.0,77.7862 -50.0,120.0167 -50.0,120.0167 -60.0,77.7862 -60.0))", "h23v15": "POLYGON ((100 -70,100 -60,175.4526 -60.0,175.4526 -70.0,100 -70))", "h23v16": "POLYGON ((146.1902 -73.875,146.1902 -70.0,180 -70,180.0 -73.875,146.1902 -73.875))", "h07v05": "POLYGON ((-143.5948 30.0,-143.5948 40.0,-115.4604 40.0,-115.4604 30.0,-143.5948 30.0))", "h07v04": "POLYGON ((-171.1296 40.0,-171.1296 50.0,-130.5299 50.0,-130.5299 40.0,-171.1296 40.0))", "h07v07": "POLYGON ((-117.0596 10.0,-117.0596 20.0,-101.5342 20.0,-101.5342 10.0,-117.0596 10.0))", "h07v06": "POLYGON ((-127.0171 20.0,-127.0171 30.0,-106.4089 30.0,-106.4089 20.0,-127.0171 20.0))", "h07v03": "POLYGON ((-180 50,-180.0 56.2583,-155.5594 56.2583,-155.5594 50.0,-180 50))", "h06v11": "POLYGON ((-138.5641 -30.0,-138.5641 -20.0,-117.0507 -20.0,-117.0507 -30.0,-138.5641 -30.0))", "h06v10": "POLYGON ((-127.7013 -20.0,-127.7013 -10.0,-111.6885 -10.0,-111.6885 -20.0,-127.7013 -20.0))", "h06v13": "POLYGON ((-180 -50,-180 -40,-143.5839 -40.0,-143.5839 -50.0,-180 -50))", "h06v12": "POLYGON ((-156.6489 -40.0,-156.6489 -30.0,-127.0074 -30.0,-127.0074 -40.0,-156.6489 -40.0))", "h07v09": "POLYGON ((-111.6969 -10.0,-111.6969 -0.0,-99.9917 -0.0,-99.9917 -10.0,-111.6969 -10.0))", "h06v14": "POLYGON ((-180.0 -52.3333,-180 -50,-171.1167 -50.0,-171.1167 -52.3333,-180.0 -52.3333))", "h24v08": "POLYGON ((60 0,60 10,71.0883 10.0,71.0883 -0.0,60 0))", "h24v09": "POLYGON ((60 -10,60 0,71.0883 -0.0,71.0883 -10.0,60 -10))", "h24v06": "POLYGON ((63.8507 20.0,63.8507 30.0,80.8387 30.0,80.8387 20.0,63.8507 20.0))", "h25v13": "POLYGON ((91.3785 -50.0,91.3785 -40.0,124.4709 -40.0,124.4709 -50.0,91.3785 -50.0))", "h25v10": "POLYGON ((71.0799 -20.0,71.0799 -10.0,85.1431 -10.0,85.1431 -20.0,71.0799 -20.0))", "h25v11": "POLYGON ((74.4924 -30.0,74.4924 -20.0,92.3857 -20.0,92.3857 -30.0,74.4924 -30.0))", "h24v02": "POLYGON ((120 60,120 70,180 70,180 60,120 60))", "h24v03": "POLYGON ((93.3434 50.0,93.3434 60.0,140.0167 60.0,140.0167 50.0,93.3434 50.0))", "h25v14": "POLYGON ((108.9007 -60.0,108.9007 -50.0,160.0167 -50.0,160.0167 -60.0,108.9007 -60.0))", "h25v15": "POLYGON ((140.0 -67.1167,140 -60,180 -60,180.0 -67.1167,140.0 -67.1167))", "h01v10": "POLYGON ((-180 -20,-180 -10,-162.4598 -10.0,-162.4598 -20.0,-180 -20))", "h01v11": "POLYGON ((-180.0 -27.2667,-180 -20,-170.2596 -20.0,-170.2596 -27.2667,-180.0 -27.2667))", "h15v11": "POLYGON ((-34.641 -30.0,-34.641 -20.0,-21.2747 -20.0,-21.2747 -30.0,-34.641 -30.0))", "h15v10": "POLYGON ((-31.9253 -20.0,-31.9253 -10.0,-20.3001 -10.0,-20.3001 -20.0,-31.9253 -20.0))", "h15v13": "POLYGON ((-46.6717 -50.0,-46.6717 -40.0,-26.0973 -40.0,-26.0973 -50.0,-46.6717 -50.0))", "h15v12": "POLYGON ((-39.1622 -40.0,-39.1622 -30.0,-23.0844 -30.0,-23.0844 -40.0,-39.1622 -40.0))", "h15v15": "POLYGON ((-87.7141 -70.0,-87.7141 -60.0,-39.9833 -60.0,-39.9833 -70.0,-87.7141 -70.0))", "h15v14": "POLYGON ((-60 -60,-60 -50,-31.1015 -50.0,-31.1015 -60.0,-60 -60))", "h15v17": "POLYGON ((-180.0 -83.625,-180 -80,-115.1274 -80.0,-115.1274 -83.625,-180.0 -83.625))", "h15v16": "POLYGON ((-172.7631 -80.0,-172.7631 -70.0,-58.4517 -70.0,-58.4517 -80.0,-172.7631 -80.0))", "h19v06": "POLYGON ((10.6418 20.0,10.6418 30.0,23.1036 30.0,23.1036 20.0,10.6418 20.0))", "h07v14": "POLYGON ((-180.0 -56.2583,-180 -50,-155.5594 -50.0,-155.5594 -56.2583,-180.0 -56.2583))", "h13v08": "POLYGON ((-50.7713 -0.0,-50.7713 10.0,-39.9917 10.0,-39.9917 -0.0,-50.7713 -0.0))", "h13v09": "POLYGON ((-50.7713 -10.0,-50.7713 -0.0,-39.9917 -0.0,-39.9917 -10.0,-50.7713 -10.0))", "h12v16": "POLYGON ((-180.0 -73.875,-180 -70,-146.1659 -70.0,-146.1659 -73.875,-180.0 -73.875))", "h35v08": "POLYGON ((170 0,170 10,180 10,180 0,170 0))", "h12v11": "POLYGON ((-69.282 -30.0,-69.282 -20.0,-53.2 -20.0,-53.2 -30.0,-69.282 -30.0))", "h12v12": "POLYGON ((-78.3244 -40.0,-78.3244 -30.0,-57.7254 -30.0,-57.7254 -40.0,-78.3244 -40.0))", "h12v13": "POLYGON ((-93.3434 -50.0,-93.3434 -40.0,-65.2595 -40.0,-65.2595 -50.0,-93.3434 -50.0))", "h19v02": "POLYGON ((20 60,20 70,58.5005 70.0,58.5005 60.0,20 60))", "h13v02": "POLYGON ((-146.1902 60.0,-146.1902 70.0,-79.9833 70.0,-79.9833 60.0,-146.1902 60.0))", "h35v07": "POLYGON ((172.6225 10.0,172.6225 19.1833,180.0 19.1833,180 10,172.6225 10.0))", "h13v04": "POLYGON ((-77.7862 40.0,-77.7862 50.0,-52.2054 50.0,-52.2054 40.0,-77.7862 40.0))", "h13v05": "POLYGON ((-65.2704 30.0,-65.2704 40.0,-46.1784 40.0,-46.1784 30.0,-65.2704 30.0))", "h13v06": "POLYGON ((-57.735 20.0,-57.735 30.0,-42.5582 30.0,-42.5582 20.0,-57.735 20.0))", "h13v07": "POLYGON ((-53.2089 10.0,-53.2089 20.0,-40.6086 20.0,-40.6086 10.0,-53.2089 10.0))", "h04v13": "POLYGON ((-180.0 -43.7667,-180 -40,-169.6921 -40.0,-169.6921 -43.7667,-180.0 -43.7667))", "h04v12": "POLYGON ((-180 -40,-180 -30,-150.1014 -30.0,-150.1014 -40.0,-180 -40))", "h04v11": "POLYGON ((-161.6581 -30.0,-161.6581 -20.0,-138.3342 -20.0,-138.3342 -30.0,-161.6581 -30.0))", "h04v10": "POLYGON ((-148.9849 -20.0,-148.9849 -10.0,-131.997 -10.0,-131.997 -20.0,-148.9849 -20.0))", "h27v12": "POLYGON ((103.923 -40.0,103.923 -30.0,130.5516 -30.0,130.5516 -40.0,103.923 -40.0))", "h19v01": "POLYGON ((29.238 70.0,29.238 80.0,115.2234 80.0,115.2234 70.0,29.238 70.0))", "h05v09": "POLYGON ((-132.0055 -10.0,-132.0055 -0.0,-119.9917 -0.0,-119.9917 -10.0,-132.0055 -10.0))", "h05v08": "POLYGON ((-132.0055 -0.0,-132.0055 10.0,-119.9917 10.0,-119.9917 -0.0,-132.0055 -0.0))", "h05v07": "POLYGON ((-138.3431 10.0,-138.3431 20.0,-121.8427 20.0,-121.8427 10.0,-138.3431 10.0))", "h05v06": "POLYGON ((-150.1111 20.0,-150.1111 30.0,-127.6925 30.0,-127.6925 20.0,-150.1111 20.0))", "h05v05": "POLYGON ((-169.7029 30.0,-169.7029 40.0,-138.5544 40.0,-138.5544 30.0,-169.7029 30.0))", "h05v04": "POLYGON ((-180 40,-180.0 48.1917,-156.638 48.1917,-156.638 40.0,-180 40))", "h00v09": "POLYGON ((-180 -10,-180 0,-169.9917 -0.0,-169.9917 -10.0,-180 -10))", "h26v08": "POLYGON ((80 0,80 10,91.3969 10.0,91.3969 -0.0,80 0))", "h26v09": "POLYGON ((80 -10,80 0,91.3969 -0.0,91.3969 -10.0,80 -10))", "h26v02": "POLYGON ((160 60,160.0 63.6167,180.0 63.6167,180 60,160 60))", "h26v03": "POLYGON ((124.4579 50.0,124.4579 60.0,180 60,180 50,124.4579 50.0))", "h26v04": "POLYGON ((104.4326 40.0,104.4326 50.0,140.0281 50.0,140.0281 40.0,104.4326 40.0))", "h26v05": "POLYGON ((92.376 30.0,92.376 40.0,117.4975 40.0,117.4975 30.0,92.376 30.0))", "h26v06": "POLYGON ((85.1342 20.0,85.1342 30.0,103.9327 30.0,103.9327 20.0,85.1342 20.0))", "h26v07": "POLYGON ((81.2341 10.0,81.2341 20.0,95.7849 20.0,95.7849 10.0,81.2341 10.0))", "h17v13": "POLYGON ((-15.5572 -50.0,-15.5572 -40.0,0.013 -40.0,0.013 -50.0,-15.5572 -50.0))", "h17v12": "POLYGON ((-13.0541 -40.0,-13.0541 -30.0,0.0109 -30.0,0.0109 -40.0,-13.0541 -40.0))", "h17v11": "POLYGON ((-11.547 -30.0,-11.547 -20.0,0.0096 -20.0,0.0096 -30.0,-11.547 -30.0))", "h17v10": "POLYGON ((-10.6418 -20.0,-10.6418 -10.0,0.0089 -10.0,0.0089 -20.0,-10.6418 -20.0))", "h17v17": "POLYGON ((-180 -90,-180 -80,57.2957 -80.0,57.2957 -90.0,-180 -90))", "h17v16": "POLYGON ((-57.5877 -80.0,-57.5877 -70.0,0.048 -70.0,0.048 -80.0,-57.5877 -80.0))", "h17v15": "POLYGON ((-29.238 -70.0,-29.238 -60.0,0.0244 -60.0,0.0244 -70.0,-29.238 -70.0))", "h17v14": "POLYGON ((-20 -60,-20 -50,0.0167 -50.0,0.0167 -60.0,-20 -60))", "h02v11": "POLYGON ((-180 -30,-180 -20,-159.6178 -20.0,-159.6178 -30.0,-180 -30))", "h02v10": "POLYGON ((-170.2684 -20.0,-170.2684 -10.0,-152.3055 -10.0,-152.3055 -20.0,-170.2684 -20.0))", "h03v07": "POLYGON ((-159.6267 10.0,-159.6267 20.0,-142.1513 20.0,-142.1513 10.0,-159.6267 10.0))", "h03v06": "POLYGON ((-173.2051 20.0,-173.2051 30.0,-148.976 30.0,-148.976 20.0,-173.2051 20.0))", "h33v06": "POLYGON ((159.6267 20.0,159.6267 30.0,180 30,180 20,159.6267 20.0))", "h33v07": "POLYGON ((152.314 10.0,152.314 20.0,170.2773 20.0,170.2773 10.0,152.314 10.0))", "h33v05": "POLYGON ((173.2051 30.0,173.2051 33.5583,180.0 33.5583,180 30,173.2051 30.0))", "h12v15": "POLYGON ((-175.4283 -70.0,-175.4283 -60.0,-99.9833 -60.0,-99.9833 -70.0,-175.4283 -70.0))", "h33v08": "POLYGON ((150 0,150 10,162.4767 10.0,162.4767 -0.0,150 0))", "h33v09": "POLYGON ((150 -10,150 0,162.4767 -0.0,162.4767 -10.0,150 -10))", "h12v10": "POLYGON ((-63.8507 -20.0,-63.8507 -10.0,-50.7629 -10.0,-50.7629 -20.0,-63.8507 -20.0))", "h35v09": "POLYGON ((170 -10,170 0,180 0,180 -10,170 -10))", "h34v10": "POLYGON ((162.4683 -20.0,162.4683 -10.0,180 -10,180 -20,162.4683 -20.0))", "h34v11": "POLYGON ((170.2684 -27.2667,170.2684 -20.0,180 -20,180.0 -27.2667,170.2684 -27.2667))", "h31v04": "POLYGON ((169.7029 40.0,169.7029 43.7583,180.0 43.7583,180 40,169.7029 40.0))", "h31v05": "POLYGON ((150.1111 30.0,150.1111 40.0,180 40,180 30,150.1111 30.0))", "h31v06": "POLYGON ((138.3431 20.0,138.3431 30.0,161.6677 30.0,161.6677 20.0,138.3431 20.0))", "h31v07": "POLYGON ((132.0055 10.0,132.0055 20.0,148.9938 20.0,148.9938 10.0,132.0055 10.0))", "h31v08": "POLYGON ((130 0,130 10,142.1682 10.0,142.1682 -0.0,130 0))", "h31v09": "POLYGON ((130 -10,130 0,142.1682 -0.0,142.1682 -10.0,130 -10))", "h13v03": "POLYGON ((-100 50,-100 60,-62.216 60.0,-62.216 50.0,-100 50))", "h14v05": "POLYGON ((-52.2163 30.0,-52.2163 40.0,-34.6314 40.0,-34.6314 30.0,-52.2163 30.0))", "h14v04": "POLYGON ((-62.229 40.0,-62.229 50.0,-39.1513 50.0,-39.1513 40.0,-62.229 40.0))", "h14v07": "POLYGON ((-42.5671 10.0,-42.5671 20.0,-30.4543 20.0,-30.4543 10.0,-42.5671 10.0))", "h14v06": "POLYGON ((-46.188 20.0,-46.188 30.0,-31.9165 30.0,-31.9165 20.0,-46.188 20.0))", "h14v01": "POLYGON ((-180 70,-180 80,-87.6898 80.0,-87.6898 70.0,-180 70))", "h14v00": "POLYGON ((-180 80,-180.0 80.4083,-172.7151 80.4083,-172.7151 80.0,-180 80))", "h14v03": "POLYGON ((-80 50,-80 60,-46.6588 60.0,-46.6588 50.0,-80 50))", "h14v02": "POLYGON ((-116.9522 60.0,-116.9522 70.0,-59.9833 70.0,-59.9833 60.0,-116.9522 60.0))", "h14v09": "POLYGON ((-40.6171 -10.0,-40.6171 -0.0,-29.9917 -0.0,-29.9917 -10.0,-40.6171 -10.0))", "h14v08": "POLYGON ((-40.6171 -0.0,-40.6171 10.0,-29.9917 10.0,-29.9917 -0.0,-40.6171 -0.0))", "h28v03": "POLYGON ((155.5724 50.0,155.5724 56.25,180.0 56.25,180 50,155.5724 50.0))", "h28v06": "POLYGON ((106.4178 20.0,106.4178 30.0,127.0267 30.0,127.0267 20.0,106.4178 20.0))", "h28v07": "POLYGON ((101.5427 10.0,101.5427 20.0,117.0684 20.0,117.0684 10.0,101.5427 10.0))", "h28v04": "POLYGON ((130.5407 40.0,130.5407 50.0,171.1426 50.0,171.1426 40.0,130.5407 40.0))", "h28v05": "POLYGON ((115.4701 30.0,115.4701 40.0,143.6057 40.0,143.6057 30.0,115.4701 30.0))", "h28v08": "POLYGON ((100 0,100 10,111.7054 10.0,111.7054 -0.0,100 0))", "h28v09": "POLYGON ((100 -10,100 0,111.7054 -0.0,111.7054 -10.0,100 -10))", "h16v07": "POLYGON ((-21.2836 10.0,-21.2836 20.0,-10.1458 20.0,-10.1458 10.0,-21.2836 10.0))", "h16v06": "POLYGON ((-23.094 20.0,-23.094 30.0,-10.6329 30.0,-10.6329 20.0,-23.094 20.0))", "h21v16": "POLYGON ((87.7141 -80.0,87.7141 -70.0,180 -70,180 -80,87.7141 -80.0))", "h00v10": "POLYGON ((-180.0 -19.1917,-180 -10,-172.6141 -10.0,-172.6141 -19.1917,-180.0 -19.1917))", "h16v03": "POLYGON ((-40 50,-40 60,-15.5443 60.0,-15.5443 50.0,-40 50))", "h20v08": "POLYGON ((20 0,20 10,30.4713 10.0,30.4713 -0.0,20 0))", "h09v11": "POLYGON ((-103.923 -30.0,-103.923 -20.0,-85.1254 -20.0,-85.1254 -30.0,-103.923 -30.0))", "h21v05": "POLYGON ((34.641 30.0,34.641 40.0,52.2272 40.0,52.2272 30.0,34.641 30.0))", "h21v04": "POLYGON ((39.1622 40.0,39.1622 50.0,62.2419 50.0,62.2419 40.0,39.1622 40.0))", "h21v07": "POLYGON ((30.4628 10.0,30.4628 20.0,42.576 20.0,42.576 10.0,30.4628 10.0))", "h21v15": "POLYGON ((60 -70,60 -60,116.9765 -60.0,116.9765 -70.0,60 -70))", "h21v01": "POLYGON ((87.7141 70.0,87.7141 80.0,180 80,180 70,87.7141 70.0))", "h09v12": "POLYGON ((-117.4867 -40.0,-117.4867 -30.0,-92.3664 -30.0,-92.3664 -40.0,-117.4867 -40.0))", "h21v03": "POLYGON ((46.6717 50.0,46.6717 60.0,80.0167 60.0,80.0167 50.0,46.6717 50.0))", "h21v02": "POLYGON ((60 60,60 70,116.9765 70.0,116.9765 60.0,60 60))", "h20v11": "POLYGON ((21.2836 -30.0,21.2836 -20.0,34.6506 -20.0,34.6506 -30.0,21.2836 -30.0))", "h20v10": "POLYGON ((20.3085 -20.0,20.3085 -10.0,31.9342 -10.0,31.9342 -20.0,20.3085 -20.0))", "h20v13": "POLYGON ((26.1081 -50.0,26.1081 -40.0,46.6847 -40.0,46.6847 -50.0,26.1081 -50.0))", "h20v12": "POLYGON ((23.094 -40.0,23.094 -30.0,39.1731 -30.0,39.1731 -40.0,23.094 -40.0))", "h20v15": "POLYGON ((40 -70,40 -60,87.7385 -60.0,87.7385 -70.0,40 -70))", "h20v14": "POLYGON ((31.1145 -60.0,31.1145 -50.0,60.0167 -50.0,60.0167 -60.0,31.1145 -60.0))", "h20v17": "POLYGON ((115.1754 -83.625,115.1754 -80.0,180 -80,180.0 -83.625,115.1754 -83.625))", "h20v16": "POLYGON ((58.4761 -80.0,58.4761 -70.0,172.8111 -70.0,172.8111 -80.0,58.4761 -80.0))", "h32v12": "POLYGON ((161.6581 -38.9417,161.6581 -30.0,180 -30,180.0 -38.9417,161.6581 -38.9417))", "h32v10": "POLYGON ((142.1597 -20.0,142.1597 -10.0,159.6355 -10.0,159.6355 -20.0,142.1597 -20.0))", "h32v11": "POLYGON ((148.9849 -30.0,148.9849 -20.0,173.2147 -20.0,173.2147 -30.0,148.9849 -30.0))", "h27v14": "POLYGON ((140.0151 -60.0,140.0151 -50.0,180 -50,180 -60,140.0151 -60.0))", "h19v07": "POLYGON ((10.1543 10.0,10.1543 20.0,21.2924 20.0,21.2924 10.0,10.1543 10.0))", "h19v04": "POLYGON ((13.0541 40.0,13.0541 50.0,31.1274 50.0,31.1274 40.0,13.0541 40.0))", "h19v05": "POLYGON ((11.547 30.0,11.547 40.0,26.119 40.0,26.119 30.0,11.547 30.0))", "h27v10": "POLYGON ((91.3884 -20.0,91.3884 -10.0,106.4266 -10.0,106.4266 -20.0,91.3884 -20.0))", "h27v11": "POLYGON ((95.776 -30.0,95.776 -20.0,115.4797 -20.0,115.4797 -30.0,95.776 -30.0))", "h19v00": "POLYGON ((57.5877 80.0,57.5877 86.8167,180.0 86.8167,180 80,57.5877 80.0))", "h27v13": "POLYGON ((117.4867 -50.0,117.4867 -40.0,155.5853 -40.0,155.5853 -50.0,117.4867 -50.0))", "h20v05": "POLYGON ((23.094 30.0,23.094 40.0,39.1731 40.0,39.1731 30.0,23.094 30.0))", "h19v08": "POLYGON ((10 0,10 10,20.317 10.0,20.317 -0.0,10 0))", "h19v09": "POLYGON ((10 -10,10 0,20.317 -0.0,20.317 -10.0,10 -10))", "h13v01": "POLYGON ((-180 70,-180.0 77.1667,-116.9278 77.1667,-116.9278 70.0,-180 70))", "h16v09": "POLYGON ((-20.3085 -10.0,-20.3085 -0.0,-9.9917 -0.0,-9.9917 -10.0,-20.3085 -10.0))", "h16v08": "POLYGON ((-20.3085 -0.0,-20.3085 10.0,-9.9917 10.0,-9.9917 -0.0,-20.3085 -0.0))", "h09v14": "POLYGON ((-180 -60,-180 -50,-124.4449 -50.0,-124.4449 -60.0,-180 -60))", "h09v15": "POLYGON ((-180.0 -63.6167,-180 -60,-159.9833 -60.0,-159.9833 -63.6167,-180.0 -63.6167))", "h16v05": "POLYGON ((-26.1081 30.0,-26.1081 40.0,-11.5374 40.0,-11.5374 30.0,-26.1081 30.0))", "h16v04": "POLYGON ((-31.1145 40.0,-31.1145 50.0,-13.0432 50.0,-13.0432 40.0,-31.1145 40.0))", "h09v10": "POLYGON ((-95.776 -20.0,-95.776 -10.0,-81.2257 -10.0,-81.2257 -20.0,-95.776 -20.0))", "h16v02": "POLYGON ((-58.4761 60.0,-58.4761 70.0,-19.9833 70.0,-19.9833 60.0,-58.4761 60.0))", "h16v01": "POLYGON ((-115.1754 70.0,-115.1754 80.0,-29.2137 80.0,-29.2137 70.0,-115.1754 70.0))", "h16v00": "POLYGON ((-180 80,-180.0 86.8167,-57.5397 86.8167,-57.5397 80.0,-180 80))", "h24v10": "POLYGON ((60.9256 -20.0,60.9256 -10.0,74.5013 -10.0,74.5013 -20.0,60.9256 -20.0))", "h10v09": "POLYGON ((-81.2341 -10.0,-81.2341 -0.0,-69.9917 -0.0,-69.9917 -10.0,-81.2341 -10.0))", "h10v08": "POLYGON ((-81.2341 -0.0,-81.2341 10.0,-69.9917 10.0,-69.9917 -0.0,-81.2341 -0.0))", "h22v11": "POLYGON ((42.5671 -30.0,42.5671 -20.0,57.7446 -20.0,57.7446 -30.0,42.5671 -30.0))", "h22v10": "POLYGON ((40.6171 -20.0,40.6171 -10.0,53.2178 -10.0,53.2178 -20.0,40.6171 -20.0))", "h22v16": "POLYGON ((116.9522 -77.1583,116.9522 -70.0,180 -70,180.0 -77.1583,116.9522 -77.1583))", "h22v15": "POLYGON ((80 -70,80 -60,146.2146 -60.0,146.2146 -70.0,80 -70))", "h22v14": "POLYGON ((62.229 -60.0,62.229 -50.0,100.0167 -50.0,100.0167 -60.0,62.229 -60.0))", "h11v15": "POLYGON ((-180 -70,-180 -60,-119.9833 -60.0,-119.9833 -70.0,-180 -70))", "h11v14": "POLYGON ((-140 -60,-140 -50,-93.3305 -50.0,-93.3305 -60.0,-140 -60))", "h10v03": "POLYGON ((-160 50,-160 60,-108.8877 60.0,-108.8877 50.0,-160 50))", "h11v16": "POLYGON ((-180.0 -70.5333,-180 -70,-175.4039 -70.0,-175.4039 -70.5333,-180.0 -70.5333))", "h11v11": "POLYGON ((-80.829 -30.0,-80.829 -20.0,-63.8418 -20.0,-63.8418 -30.0,-80.829 -30.0))", "h10v04": "POLYGON ((-124.4579 40.0,-124.4579 50.0,-91.3676 50.0,-91.3676 40.0,-124.4579 40.0))", "h10v07": "POLYGON ((-85.1342 10.0,-85.1342 20.0,-71.0714 20.0,-71.0714 10.0,-85.1342 10.0))", "h11v12": "POLYGON ((-91.3785 -40.0,-91.3785 -30.0,-69.2724 -30.0,-69.2724 -40.0,-91.3785 -40.0))", "h23v09": "POLYGON ((50 -10,50 0,60.9341 -0.0,60.9341 -10.0,50 -10))", "h23v08": "POLYGON ((50 0,50 10,60.9341 10.0,60.9341 -0.0,50 0))", "h23v07": "POLYGON ((50.7713 10.0,50.7713 20.0,63.8595 20.0,63.8595 10.0,50.7713 10.0))", "h23v06": "POLYGON ((53.2089 20.0,53.2089 30.0,69.2917 30.0,69.2917 20.0,53.2089 20.0))", "h23v05": "POLYGON ((57.735 30.0,57.735 40.0,78.3353 40.0,78.3353 30.0,57.735 30.0))", "h23v04": "POLYGON ((65.2704 40.0,65.2704 50.0,93.3564 50.0,93.3564 40.0,65.2704 40.0))", "h23v03": "POLYGON ((77.7862 50.0,77.7862 60.0,120.0167 60.0,120.0167 50.0,77.7862 50.0))", "h23v02": "POLYGON ((100 60,100 70,175.4526 70.0,175.4526 60.0,100 60))", "h23v01": "POLYGON ((146.1902 70.0,146.1902 73.875,180.0 73.875,180 70,146.1902 70.0))", "h08v03": "POLYGON ((-180 50,-180 60,-140.0022 60.0,-140.0022 50.0,-180 50))", "h08v04": "POLYGON ((-155.5724 40.0,-155.5724 50.0,-117.4758 50.0,-117.4758 40.0,-155.5724 40.0))", "h08v05": "POLYGON ((-130.5407 30.0,-130.5407 40.0,-103.9134 40.0,-103.9134 30.0,-130.5407 30.0))", "h08v06": "POLYGON ((-115.4701 20.0,-115.4701 30.0,-95.7671 30.0,-95.7671 20.0,-115.4701 20.0))", "h08v07": "POLYGON ((-106.4178 10.0,-106.4178 20.0,-91.3799 20.0,-91.3799 10.0,-106.4178 10.0))", "h08v08": "POLYGON ((-101.5427 -0.0,-101.5427 10.0,-89.9917 10.0,-89.9917 -0.0,-101.5427 -0.0))", "h08v09": "POLYGON ((-101.5427 -10.0,-101.5427 -0.0,-89.9917 -0.0,-89.9917 -10.0,-101.5427 -10.0))", "h15v05": "POLYGON ((-39.1622 30.0,-39.1622 40.0,-23.0844 40.0,-23.0844 30.0,-39.1622 30.0))", "h25v09": "POLYGON ((70 -10,70 0,81.2426 -0.0,81.2426 -10.0,70 -10))", "h22v13": "POLYGON ((52.2163 -50.0,52.2163 -40.0,77.7992 -40.0,77.7992 -50.0,52.2163 -50.0))", "h22v12": "POLYGON ((46.188 -40.0,46.188 -30.0,65.2812 -30.0,65.2812 -40.0,46.188 -40.0))", "h24v15": "POLYGON ((120 -70,120 -60,180 -60,180 -70,120 -70))", "h24v14": "POLYGON ((93.3434 -60.0,93.3434 -50.0,140.0167 -50.0,140.0167 -60.0,93.3434 -60.0))", "h25v03": "POLYGON ((108.9007 50.0,108.9007 60.0,160.0167 60.0,160.0167 50.0,108.9007 50.0))", "h25v02": "POLYGON ((140 60,140.0 67.1167,180.0 67.1167,180 60,140 60))", "h25v05": "POLYGON ((80.829 30.0,80.829 40.0,104.4435 40.0,104.4435 30.0,80.829 30.0))", "h25v04": "POLYGON ((91.3785 40.0,91.3785 50.0,124.4709 50.0,124.4709 40.0,91.3785 40.0))", "h24v13": "POLYGON ((78.3244 -50.0,78.3244 -40.0,108.9136 -40.0,108.9136 -50.0,78.3244 -50.0))", "h25v06": "POLYGON ((74.4924 20.0,74.4924 30.0,92.3857 30.0,92.3857 20.0,74.4924 20.0))", "h29v14": "POLYGON ((171.1296 -52.3333,171.1296 -50.0,180 -50,180.0 -52.3333,171.1296 -52.3333))", "h29v12": "POLYGON ((127.0171 -40.0,127.0171 -30.0,156.6598 -30.0,156.6598 -40.0,127.0171 -40.0))", "h29v13": "POLYGON ((143.5948 -50.0,143.5948 -40.0,180 -40,180 -50,143.5948 -50.0))", "h29v10": "POLYGON ((111.6969 -20.0,111.6969 -10.0,127.7102 -10.0,127.7102 -20.0,111.6969 -20.0))", "h29v11": "POLYGON ((117.0596 -30.0,117.0596 -20.0,138.5737 -20.0,138.5737 -30.0,117.0596 -30.0))", "h01v07": "POLYGON ((-180 10,-180 20,-162.4598 20.0,-162.4598 10.0,-180 10))", "h01v06": "POLYGON ((-180 20,-180.0 27.2667,-170.2596 27.2667,-170.2596 20.0,-180 20))", "h01v09": "POLYGON ((-172.6225 -10.0,-172.6225 -0.0,-159.9917 -0.0,-159.9917 -10.0,-172.6225 -10.0))", "h01v08": "POLYGON ((-172.6225 -0.0,-172.6225 10.0,-159.9917 10.0,-159.9917 -0.0,-172.6225 -0.0))", "h10v02": "POLYGON ((-180 60,-180.0 67.1167,-139.9833 67.1167,-139.9833 60.0,-180 60))", "h10v05": "POLYGON ((-104.4326 30.0,-104.4326 40.0,-80.8194 40.0,-80.8194 30.0,-104.4326 30.0))", "h11v10": "POLYGON ((-74.4924 -20.0,-74.4924 -10.0,-60.9171 -10.0,-60.9171 -20.0,-74.4924 -20.0))", "h11v13": "POLYGON ((-108.9007 -50.0,-108.9007 -40.0,-78.3136 -40.0,-78.3136 -50.0,-108.9007 -50.0))", "h10v06": "POLYGON ((-92.376 20.0,-92.376 30.0,-74.4836 30.0,-74.4836 20.0,-92.376 20.0))", "h13v16": "POLYGON ((-180.0 -77.1667,-180 -70,-116.9278 -70.0,-116.9278 -77.1667,-180.0 -77.1667))", "h13v15": "POLYGON ((-146.1902 -70.0,-146.1902 -60.0,-79.9833 -60.0,-79.9833 -70.0,-146.1902 -70.0))", "h13v14": "POLYGON ((-100 -60,-100 -50,-62.216 -50.0,-62.216 -60.0,-100 -60))", "h13v13": "POLYGON ((-77.7862 -50.0,-77.7862 -40.0,-52.2054 -40.0,-52.2054 -50.0,-77.7862 -50.0))", "h13v12": "POLYGON ((-65.2704 -40.0,-65.2704 -30.0,-46.1784 -30.0,-46.1784 -40.0,-65.2704 -40.0))", "h13v11": "POLYGON ((-57.735 -30.0,-57.735 -20.0,-42.5582 -20.0,-42.5582 -30.0,-57.735 -30.0))", "h13v10": "POLYGON ((-53.2089 -20.0,-53.2089 -10.0,-40.6086 -10.0,-40.6086 -20.0,-53.2089 -20.0))", "h12v03": "POLYGON ((-120 50,-120 60,-77.7732 60.0,-77.7732 50.0,-120 50))", "h12v02": "POLYGON ((-175.4283 60.0,-175.4283 70.0,-99.9833 70.0,-99.9833 60.0,-175.4283 60.0))", "h12v01": "POLYGON ((-180 70,-180.0 73.875,-146.1659 73.875,-146.1659 70.0,-180 70))", "h12v07": "POLYGON ((-63.8507 10.0,-63.8507 20.0,-50.7629 20.0,-50.7629 10.0,-63.8507 10.0))", "h12v06": "POLYGON ((-69.282 20.0,-69.282 30.0,-53.2 30.0,-53.2 20.0,-69.282 20.0))", "h12v05": "POLYGON ((-78.3244 30.0,-78.3244 40.0,-57.7254 40.0,-57.7254 30.0,-78.3244 30.0))", "h12v04": "POLYGON ((-93.3434 40.0,-93.3434 50.0,-65.2595 50.0,-65.2595 40.0,-93.3434 40.0))", "h12v09": "POLYGON ((-60.9256 -10.0,-60.9256 -0.0,-49.9917 -0.0,-49.9917 -10.0,-60.9256 -10.0))", "h12v08": "POLYGON ((-60.9256 -0.0,-60.9256 10.0,-49.9917 10.0,-49.9917 -0.0,-60.9256 -0.0))", "h03v09": "POLYGON ((-152.314 -10.0,-152.314 -0.0,-139.9917 -0.0,-139.9917 -10.0,-152.314 -10.0))", "h03v08": "POLYGON ((-152.314 -0.0,-152.314 10.0,-139.9917 10.0,-139.9917 -0.0,-152.314 -0.0))", "h26v15": "POLYGON ((160.0 -63.6167,160 -60,180 -60,180.0 -63.6167,160.0 -63.6167))", "h26v14": "POLYGON ((124.4579 -60.0,124.4579 -50.0,180 -50,180 -60,124.4579 -60.0))", "h26v13": "POLYGON ((104.4326 -50.0,104.4326 -40.0,140.0281 -40.0,140.0281 -50.0,104.4326 -50.0))", "h26v12": "POLYGON ((92.376 -40.0,92.376 -30.0,117.4975 -30.0,117.4975 -40.0,92.376 -40.0))", "h26v11": "POLYGON ((85.1342 -30.0,85.1342 -20.0,103.9327 -20.0,103.9327 -30.0,85.1342 -30.0))", "h26v10": "POLYGON ((81.2341 -20.0,81.2341 -10.0,95.7849 -10.0,95.7849 -20.0,81.2341 -20.0))", "h18v12": "POLYGON ((0 -40,0 -30,13.065 -30.0,13.065 -40.0,0 -40))", "h18v13": "POLYGON ((0 -50,0 -40,15.5702 -40.0,15.5702 -50.0,0 -50))", "h18v10": "POLYGON ((0 -20,0 -10,10.6506 -10.0,10.6506 -20.0,0 -20))", "h18v11": "POLYGON ((0 -30,0 -20,11.5566 -20.0,11.5566 -30.0,0 -30))", "h18v16": "POLYGON ((0 -80,0 -70,57.6357 -70.0,57.6357 -80.0,0 -80))", "h18v17": "POLYGON ((-0.004 -90.0,-0.004 -80.0,180 -80,180 -90,-0.004 -90.0))", "h18v14": "POLYGON ((0 -60,0 -50,20.0167 -50.0,20.0167 -60.0,0 -60))", "h18v15": "POLYGON ((0 -70,0 -60,29.2624 -60.0,29.2624 -70.0,0 -70))", "h03v05": "POLYGON ((-180 30,-180.0 38.95,-161.6485 38.95,-161.6485 30.0,-180 30))", "h02v12": "POLYGON ((-180.0 -33.5583,-180 -30,-173.1955 -30.0,-173.1955 -33.5583,-180.0 -33.5583))", "h33v11": "POLYGON ((159.6267 -30.0,159.6267 -20.0,180 -20,180 -30,159.6267 -30.0))", "h33v10": "POLYGON ((152.314 -20.0,152.314 -10.0,170.2773 -10.0,170.2773 -20.0,152.314 -20.0))", "h33v12": "POLYGON ((173.2051 -33.5583,173.2051 -30.0,180 -30,180.0 -33.5583,173.2051 -33.5583))", "h31v13": "POLYGON ((169.7029 -43.7583,169.7029 -40.0,180 -40,180.0 -43.7583,169.7029 -43.7583))", "h31v12": "POLYGON ((150.1111 -40.0,150.1111 -30.0,180 -30,180 -40,150.1111 -40.0))", "h31v11": "POLYGON ((138.3431 -30.0,138.3431 -20.0,161.6677 -20.0,161.6677 -30.0,138.3431 -30.0))", "h31v10": "POLYGON ((132.0055 -20.0,132.0055 -10.0,148.9938 -10.0,148.9938 -20.0,132.0055 -20.0))", "h28v11": "POLYGON ((106.4178 -30.0,106.4178 -20.0,127.0267 -20.0,127.0267 -30.0,106.4178 -30.0))", "h28v10": "POLYGON ((101.5427 -20.0,101.5427 -10.0,117.0684 -10.0,117.0684 -20.0,101.5427 -20.0))", "h28v13": "POLYGON ((130.5407 -50.0,130.5407 -40.0,171.1426 -40.0,171.1426 -50.0,130.5407 -50.0))", "h28v12": "POLYGON ((115.4701 -40.0,115.4701 -30.0,143.6057 -30.0,143.6057 -40.0,115.4701 -40.0))", "h28v14": "POLYGON ((155.5724 -56.25,155.5724 -50.0,180 -50,180.0 -56.25,155.5724 -56.25))", "h34v07": "POLYGON ((162.4683 10.0,162.4683 20.0,180 20,180 10,162.4683 10.0))", "h34v06": "POLYGON ((170.2684 20.0,170.2684 27.2667,180.0 27.2667,180 20,170.2684 20.0))", "h34v09": "POLYGON ((160 -10,160 0,172.631 -0.0,172.631 -10.0,160 -10))", "h34v08": "POLYGON ((160 0,160 10,172.631 10.0,172.631 -0.0,160 0))", "h25v08": "POLYGON ((70 0,70 10,81.2426 10.0,81.2426 -0.0,70 0))", "h32v05": "POLYGON ((161.6581 30.0,161.6581 38.9417,180.0 38.9417,180 30,161.6581 30.0))", "h32v07": "POLYGON ((142.1597 10.0,142.1597 20.0,159.6355 20.0,159.6355 10.0,142.1597 10.0))", "h32v06": "POLYGON ((148.9849 20.0,148.9849 30.0,173.2147 30.0,173.2147 20.0,148.9849 20.0))", "h32v09": "POLYGON ((140 -10,140 0,152.3225 -0.0,152.3225 -10.0,140 -10))", "h32v08": "POLYGON ((140 0,140 10,152.3225 10.0,152.3225 -0.0,140 0))", "h27v03": "POLYGON ((140.0151 50.0,140.0151 60.0,180 60,180 50,140.0151 50.0))", "h19v14": "POLYGON ((15.5572 -60.0,15.5572 -50.0,40.0167 -50.0,40.0167 -60.0,15.5572 -60.0))", "h19v17": "POLYGON ((57.5877 -86.8167,57.5877 -80.0,180 -80,180.0 -86.8167,57.5877 -86.8167))", "h19v16": "POLYGON ((29.238 -80.0,29.238 -70.0,115.2234 -70.0,115.2234 -80.0,29.238 -80.0))", "h19v11": "POLYGON ((10.6418 -30.0,10.6418 -20.0,23.1036 -20.0,23.1036 -30.0,10.6418 -30.0))", "h19v10": "POLYGON ((10.1543 -20.0,10.1543 -10.0,21.2924 -10.0,21.2924 -20.0,10.1543 -20.0))", "h27v05": "POLYGON ((103.923 30.0,103.923 40.0,130.5516 40.0,130.5516 30.0,103.923 30.0))", "h27v04": "POLYGON ((117.4867 40.0,117.4867 50.0,155.5853 50.0,155.5853 40.0,117.4867 40.0))", "h27v09": "POLYGON ((90 -10,90 0,101.5511 -0.0,101.5511 -10.0,90 -10))", "h27v08": "POLYGON ((90 0,90 10,101.5511 10.0,101.5511 -0.0,90 0))", "h24v16": "POLYGON ((175.4283 -70.5333,175.4283 -70.0,180 -70,180.0 -70.5333,175.4283 -70.5333))", "h24v11": "POLYGON ((63.8507 -30.0,63.8507 -20.0,80.8387 -20.0,80.8387 -30.0,63.8507 -30.0))", "h30v11": "POLYGON ((127.7013 -30.0,127.7013 -20.0,150.1207 -20.0,150.1207 -30.0,127.7013 -30.0))", "h09v09": "POLYGON ((-91.3884 -10.0,-91.3884 -0.0,-79.9917 -0.0,-79.9917 -10.0,-91.3884 -10.0))", "h09v08": "POLYGON ((-91.3884 -0.0,-91.3884 10.0,-79.9917 10.0,-79.9917 -0.0,-91.3884 -0.0))", "h21v06": "POLYGON ((31.9253 20.0,31.9253 30.0,46.1976 30.0,46.1976 20.0,31.9253 20.0))", "h09v03": "POLYGON ((-180 50,-180 60,-124.4449 60.0,-124.4449 50.0,-180 50))", "h09v02": "POLYGON ((-180 60,-180.0 63.6167,-159.9833 63.6167,-159.9833 60.0,-180 60))", "h24v12": "POLYGON ((69.282 -40.0,69.282 -30.0,91.3894 -30.0,91.3894 -40.0,69.282 -40.0))", "h09v07": "POLYGON ((-95.776 10.0,-95.776 20.0,-81.2257 20.0,-81.2257 10.0,-95.776 10.0))", "h09v06": "POLYGON ((-103.923 20.0,-103.923 30.0,-85.1254 30.0,-85.1254 20.0,-103.923 20.0))", "h09v05": "POLYGON ((-117.4867 30.0,-117.4867 40.0,-92.3664 40.0,-92.3664 30.0,-117.4867 30.0))", "h09v04": "POLYGON ((-140.0151 40.0,-140.0151 50.0,-104.4217 50.0,-104.4217 40.0,-140.0151 40.0))", "h08v14": "POLYGON ((-180 -60,-180 -50,-140.0022 -50.0,-140.0022 -60.0,-180 -60))", "h08v13": "POLYGON ((-155.5724 -50.0,-155.5724 -40.0,-117.4758 -40.0,-117.4758 -50.0,-155.5724 -50.0))", "h08v12": "POLYGON ((-130.5407 -40.0,-130.5407 -30.0,-103.9134 -30.0,-103.9134 -40.0,-130.5407 -40.0))", "h08v11": "POLYGON ((-115.4701 -30.0,-115.4701 -20.0,-95.7671 -20.0,-95.7671 -30.0,-115.4701 -30.0))", "h08v10": "POLYGON ((-106.4178 -20.0,-106.4178 -10.0,-91.3799 -10.0,-91.3799 -20.0,-106.4178 -20.0))", "h30v09": "POLYGON ((120 -10,120 0,132.0139 -0.0,132.0139 -10.0,120 -10))", "h30v08": "POLYGON ((120 0,120 10,132.0139 10.0,132.0139 -0.0,120 0))", "h30v07": "POLYGON ((121.8512 10.0,121.8512 20.0,138.352 20.0,138.352 10.0,121.8512 10.0))", "h30v06": "POLYGON ((127.7013 20.0,127.7013 30.0,150.1207 30.0,150.1207 20.0,127.7013 20.0))", "h30v05": "POLYGON ((138.5641 30.0,138.5641 40.0,169.7138 40.0,169.7138 30.0,138.5641 30.0))", "h30v04": "POLYGON ((156.6489 40.0,156.6489 48.1917,180.0 48.1917,180 40,156.6489 40.0))", "h19v03": "POLYGON ((15.5572 50.0,15.5572 60.0,40.0167 60.0,40.0167 50.0,15.5572 50.0))", "h29v09": "POLYGON ((110 -10,110 0,121.8597 -0.0,121.8597 -10.0,110 -10))", "h29v08": "POLYGON ((110 0,110 10,121.8597 10.0,121.8597 -0.0,110 0))", "h29v05": "POLYGON ((127.0171 30.0,127.0171 40.0,156.6598 40.0,156.6598 30.0,127.0171 30.0))", "h29v04": "POLYGON ((143.5948 40.0,143.5948 50.0,180 50,180 40,143.5948 40.0))", "h29v07": "POLYGON ((111.6969 10.0,111.6969 20.0,127.7102 20.0,127.7102 10.0,111.6969 10.0))", "h29v06": "POLYGON ((117.0596 20.0,117.0596 30.0,138.5737 30.0,138.5737 20.0,117.0596 20.0))", "h29v03": "POLYGON ((171.1296 50.0,171.1296 52.3333,180.0 52.3333,180 50,171.1296 50.0))", "h30v10": "POLYGON ((121.8512 -20.0,121.8512 -10.0,138.352 -10.0,138.352 -20.0,121.8512 -20.0))", "h22v02": "POLYGON ((80 60,80 70,146.2146 70.0,146.2146 60.0,80 60))", "h22v03": "POLYGON ((62.229 50.0,62.229 60.0,100.0167 60.0,100.0167 50.0,62.229 50.0))", "h11v06": "POLYGON ((-80.829 20.0,-80.829 30.0,-63.8418 30.0,-63.8418 20.0,-80.829 20.0))", "h11v07": "POLYGON ((-74.4924 10.0,-74.4924 20.0,-60.9171 20.0,-60.9171 10.0,-74.4924 10.0))", "h10v10": "POLYGON ((-85.1342 -20.0,-85.1342 -10.0,-71.0714 -10.0,-71.0714 -20.0,-85.1342 -20.0))", "h09v13": "POLYGON ((-140.0151 -50.0,-140.0151 -40.0,-104.4217 -40.0,-104.4217 -50.0,-140.0151 -50.0))", "h11v05": "POLYGON ((-91.3785 30.0,-91.3785 40.0,-69.2724 40.0,-69.2724 30.0,-91.3785 30.0))", "h30v12": "POLYGON ((138.5641 -40.0,138.5641 -30.0,169.7138 -30.0,169.7138 -40.0,138.5641 -40.0))", "h22v08": "POLYGON ((40 0,40 10,50.7798 10.0,50.7798 -0.0,40 0))", "h11v03": "POLYGON ((-140 50,-140 60,-93.3305 60.0,-93.3305 50.0,-140 50))", "h11v01": "POLYGON ((-180 70,-180.0 70.5333,-175.4039 70.5333,-175.4039 70.0,-180 70))", "h30v13": "POLYGON ((156.6489 -48.1917,156.6489 -40.0,180 -40,180.0 -48.1917,156.6489 -48.1917))", "h18v01": "POLYGON ((0 70,0 80,57.6357 80.0,57.6357 70.0,0 70))", "h18v00": "POLYGON ((-0.004 80.0,-0.004 90.0,180 90,180 80,-0.004 80.0))", "h18v03": "POLYGON ((0 50,0 60,20.0167 60.0,20.0167 50.0,0 50))", "h18v02": "POLYGON ((0 60,0 70,29.2624 70.0,29.2624 60.0,0 60))", "h18v05": "POLYGON ((0 30,0 40,13.065 40.0,13.065 30.0,0 30))", "h18v04": "POLYGON ((0 40,0 50,15.5702 50.0,15.5702 40.0,0 40))", "h18v07": "POLYGON ((0 10,0 20,10.6506 20.0,10.6506 10.0,0 10))", "h18v06": "POLYGON ((0 20,0 30,11.5566 30.0,11.5566 20.0,0 20))", "h18v09": "POLYGON ((0 -10,0 0,10.1627 -0.0,10.1627 -10.0,0 -10))", "h18v08": "POLYGON ((0 0,0 10,10.1627 10.0,10.1627 -0.0,0 0))", "h17v07": "POLYGON ((-10.6418 10.0,-10.6418 20.0,0.0089 20.0,0.0089 10.0,-10.6418 10.0))", "h17v02": "POLYGON ((-29.238 60.0,-29.238 70.0,0.0244 70.0,0.0244 60.0,-29.238 60.0))", "h17v03": "POLYGON ((-20 50,-20 60,0.0167 60.0,0.0167 50.0,-20 50))", "h02v06": "POLYGON ((-180 20,-180 30,-159.6178 30.0,-159.6178 20.0,-180 20))", "h03v11": "POLYGON ((-173.2051 -30.0,-173.2051 -20.0,-148.976 -20.0,-148.976 -30.0,-173.2051 -30.0))", "h15v03": "POLYGON ((-60 50,-60 60,-31.1015 60.0,-31.1015 50.0,-60 50))", "h06v08": "POLYGON ((-121.8512 -0.0,-121.8512 10.0,-109.9917 10.0,-109.9917 -0.0,-121.8512 -0.0))", "h06v09": "POLYGON ((-121.8512 -10.0,-121.8512 -0.0,-109.9917 -0.0,-109.9917 -10.0,-121.8512 -10.0))", "h07v12": "POLYGON ((-143.5948 -40.0,-143.5948 -30.0,-115.4604 -30.0,-115.4604 -40.0,-143.5948 -40.0))", "h07v13": "POLYGON ((-171.1296 -50.0,-171.1296 -40.0,-130.5299 -40.0,-130.5299 -50.0,-171.1296 -50.0))", "h07v10": "POLYGON ((-117.0596 -20.0,-117.0596 -10.0,-101.5342 -10.0,-101.5342 -20.0,-117.0596 -20.0))", "h07v11": "POLYGON ((-127.0171 -30.0,-127.0171 -20.0,-106.4089 -20.0,-106.4089 -30.0,-127.0171 -30.0))", "h06v03": "POLYGON ((-180 50,-180.0 52.3333,-171.1167 52.3333,-171.1167 50.0,-180 50))", "h06v06": "POLYGON ((-138.5641 20.0,-138.5641 30.0,-117.0507 30.0,-117.0507 20.0,-138.5641 20.0))", "h06v07": "POLYGON ((-127.7013 10.0,-127.7013 20.0,-111.6885 20.0,-111.6885 10.0,-127.7013 10.0))", "h06v04": "POLYGON ((-180 40,-180 50,-143.5839 50.0,-143.5839 40.0,-180 40))", "h06v05": "POLYGON ((-156.6489 30.0,-156.6489 40.0,-127.0074 40.0,-127.0074 30.0,-156.6489 30.0))", "h25v07": "POLYGON ((71.0799 10.0,71.0799 20.0,85.1431 20.0,85.1431 10.0,71.0799 10.0))", "h19v15": "POLYGON ((20 -70,20 -60,58.5005 -60.0,58.5005 -70.0,20 -70))", "h15v08": "POLYGON ((-30.4628 -0.0,-30.4628 10.0,-19.9917 10.0,-19.9917 -0.0,-30.4628 -0.0))", "h15v09": "POLYGON ((-30.4628 -10.0,-30.4628 -0.0,-19.9917 -0.0,-19.9917 -10.0,-30.4628 -10.0))", "h15v02": "POLYGON ((-87.7141 60.0,-87.7141 70.0,-39.9833 70.0,-39.9833 60.0,-87.7141 60.0))", "h27v07": "POLYGON ((91.3884 10.0,91.3884 20.0,106.4266 20.0,106.4266 10.0,91.3884 10.0))", "h15v00": "POLYGON ((-180 80,-180.0 83.625,-115.1274 83.625,-115.1274 80.0,-180 80))", "h15v01": "POLYGON ((-172.7631 70.0,-172.7631 80.0,-58.4517 80.0,-58.4517 70.0,-172.7631 70.0))", "h15v06": "POLYGON ((-34.641 20.0,-34.641 30.0,-21.2747 30.0,-21.2747 20.0,-34.641 20.0))", "h15v07": "POLYGON ((-31.9253 10.0,-31.9253 20.0,-20.3001 20.0,-20.3001 10.0,-31.9253 10.0))", "h15v04": "POLYGON ((-46.6717 40.0,-46.6717 50.0,-26.0973 50.0,-26.0973 40.0,-46.6717 40.0))", "h27v06": "POLYGON ((95.776 20.0,95.776 30.0,115.4797 30.0,115.4797 20.0,95.776 20.0))", "h19v13": "POLYGON ((13.0541 -50.0,13.0541 -40.0,31.1274 -40.0,31.1274 -50.0,13.0541 -50.0))", "h19v12": "POLYGON ((11.547 -40.0,11.547 -30.0,26.119 -30.0,26.119 -40.0,11.547 -40.0))", "h07v08": "POLYGON ((-111.6969 -0.0,-111.6969 10.0,-99.9917 10.0,-99.9917 -0.0,-111.6969 -0.0))", "h04v04": "POLYGON ((-180 40,-180.0 43.7667,-169.6921 43.7667,-169.6921 40.0,-180 40))", "h04v05": "POLYGON ((-180 30,-180 40,-150.1014 40.0,-150.1014 30.0,-180 30))", "h04v06": "POLYGON ((-161.6581 20.0,-161.6581 30.0,-138.3342 30.0,-138.3342 20.0,-161.6581 20.0))", "h04v07": "POLYGON ((-148.9849 10.0,-148.9849 20.0,-131.997 20.0,-131.997 10.0,-148.9849 10.0))", "h04v08": "POLYGON ((-142.1597 -0.0,-142.1597 10.0,-129.9917 10.0,-129.9917 -0.0,-142.1597 -0.0))", "h04v09": "POLYGON ((-142.1597 -10.0,-142.1597 -0.0,-129.9917 -0.0,-129.9917 -10.0,-142.1597 -10.0))", "h05v10": "POLYGON ((-138.3431 -20.0,-138.3431 -10.0,-121.8427 -10.0,-121.8427 -20.0,-138.3431 -20.0))", "h05v11": "POLYGON ((-150.1111 -30.0,-150.1111 -20.0,-127.6925 -20.0,-127.6925 -30.0,-150.1111 -30.0))", "h05v12": "POLYGON ((-169.7029 -40.0,-169.7029 -30.0,-138.5544 -30.0,-138.5544 -40.0,-169.7029 -40.0))", "h05v13": "POLYGON ((-180.0 -48.1917,-180 -40,-156.638 -40.0,-156.638 -48.1917,-180.0 -48.1917))", "h25v12": "POLYGON ((80.829 -40.0,80.829 -30.0,104.4435 -30.0,104.4435 -40.0,80.829 -40.0))", "h24v07": "POLYGON ((60.9256 10.0,60.9256 20.0,74.5013 20.0,74.5013 10.0,60.9256 10.0))", "h24v04": "POLYGON ((78.3244 40.0,78.3244 50.0,108.9136 50.0,108.9136 40.0,78.3244 40.0))", "h12v14": "POLYGON ((-120 -60,-120 -50,-77.7732 -50.0,-77.7732 -60.0,-120 -60))", "h17v04": "POLYGON ((-15.5572 40.0,-15.5572 50.0,0.013 50.0,0.013 40.0,-15.5572 40.0))", "h17v05": "POLYGON ((-13.0541 30.0,-13.0541 40.0,0.0109 40.0,0.0109 30.0,-13.0541 30.0))", "h17v06": "POLYGON ((-11.547 20.0,-11.547 30.0,0.0096 30.0,0.0096 20.0,-11.547 20.0))", "h24v05": "POLYGON ((69.282 30.0,69.282 40.0,91.3894 40.0,91.3894 30.0,69.282 30.0))", "h17v00": "POLYGON ((-180 80,-180 90,57.2957 90.0,57.2957 80.0,-180 80))", "h17v01": "POLYGON ((-57.5877 70.0,-57.5877 80.0,0.048 80.0,0.048 70.0,-57.5877 70.0))", "h02v08": "POLYGON ((-162.4683 -0.0,-162.4683 10.0,-149.9917 10.0,-149.9917 -0.0,-162.4683 -0.0))", "h02v09": "POLYGON ((-162.4683 -10.0,-162.4683 -0.0,-149.9917 -0.0,-149.9917 -10.0,-162.4683 -10.0))", "h03v12": "POLYGON ((-180.0 -38.95,-180 -30,-161.6485 -30.0,-161.6485 -38.95,-180.0 -38.95))", "h02v07": "POLYGON ((-170.2684 10.0,-170.2684 20.0,-152.3055 20.0,-152.3055 10.0,-170.2684 10.0))", "h03v10": "POLYGON ((-159.6267 -20.0,-159.6267 -10.0,-142.1513 -10.0,-142.1513 -20.0,-159.6267 -20.0))", "h02v05": "POLYGON ((-180 30,-180.0 33.5583,-173.1955 33.5583,-173.1955 30.0,-180 30))", "h17v08": "POLYGON ((-10.1543 -0.0,-10.1543 10.0,0.0085 10.0,0.0085 -0.0,-10.1543 -0.0))", "h17v09": "POLYGON ((-10.1543 -10.0,-10.1543 -0.0,0.0085 -0.0,0.0085 -10.0,-10.1543 -10.0))", "h24v01": "POLYGON ((175.4283 70.0,175.4283 70.5333,180.0 70.5333,180 70,175.4283 70.0))", "h35v10": "POLYGON ((172.6225 -19.1833,172.6225 -10.0,180 -10,180.0 -19.1833,172.6225 -19.1833))"}
    
    for key in modis_dict:
        modis_dict[key] = ogr.CreateGeometryFromWkt(modis_dict[key])
    geom = geolib.ds_geom(ds)
    geom_dup = geolib.geom_dup(geom)
    ct = osr.CoordinateTransformation(geom_dup.GetSpatialReference(), geolib.wgs_srs)
    geom_dup.Transform(ct)
    tile_list = []
    for key, val in list(modis_dict.items()):
        if geom_dup.Intersects(val):
            tile_list.append(key)
    return tile_list

def get_modscag(dt, outdir=None, tile_list=('h08v04', 'h09v04', 'h10v04', 'h08v05', 'h09v05'), pad_days=7):
    """Function to fetch and process MODSCAG fractional snow cover products for input datetime
    Products are tiled in MODIS sinusoidal projection
    example url: https://snow-data.jpl.nasa.gov/modscag-historic/2015/001/MOD09GA.A2015001.h07v03.005.2015006001833.snow_fraction.tif
    """

    #Could also use global MODIS 500 m snowcover grids, 8 day
    #http://nsidc.org/data/docs/daac/modis_v5/mod10a2_modis_terra_snow_8-day_global_500m_grid.gd.html
    #These are HDF4, sinusoidal
    #Should be able to load up with warplib without issue

    import re
    import requests
    from bs4 import BeautifulSoup
    
    print("\n ====== FETCHING TILES ====== ")
    
    auth = iolib.get_auth()
#     # Temporarily hardcode username and password to access MODSCAG
#     uname = "username"
#     pw = "password"

#     from requests.auth import HTTPDigestAuth
#     auth = HTTPDigestAuth(uname, pw)
    
    pad_days = timedelta(days=pad_days)
    dt_list = timelib.dt_range(dt-pad_days, dt+pad_days+timedelta(1), timedelta(1))    
    
    out_vrt_fn_list = []
    for dt in dt_list:
        out_vrt_fn = os.path.join(outdir, dt.strftime('%Y%m%d_snow_fraction.vrt'))
        #If we already have a vrt and it contains all of the necessary tiles, skip it
        if os.path.exists(out_vrt_fn):
            vrt_ds = gdal.Open(out_vrt_fn)
            if np.all([np.any([tile in sub_fn for sub_fn in vrt_ds.GetFileList()]) for tile in tile_list]):
                out_vrt_fn_list.append(out_vrt_fn)
                continue
        #Otherwise, download missing tiles and rebuild
        #Try to use historic products
        modscag_fn_list = []
        #Note: not all tiles are available for same date ranges in historic vs. real-time
        #Need to repeat search tile-by-tile
        for tile in tile_list:
            modscag_url_str = 'https://snow-data.jpl.nasa.gov/modscag-historic/%Y/%j/' 
            modscag_url_base = dt.strftime(modscag_url_str)
            print("Trying: %s" % modscag_url_base)
            r = requests.get(modscag_url_base, auth=auth)
            modscag_url_fn = []
            if r.ok:
                parsed_html = BeautifulSoup(r.content, "html.parser")
                modscag_url_fn = parsed_html.findAll(text=re.compile('%s.*snow_fraction.tif' % tile))
            if not modscag_url_fn:
                #Couldn't find historic, try to use real-time products
                modscag_url_str = 'https://snow-data.jpl.nasa.gov/modscag/%Y/%j/' 
                modscag_url_base = dt.strftime(modscag_url_str)
                print("Trying: %s" % modscag_url_base)
                r = requests.get(modscag_url_base, auth=auth)
            if r.ok: 
                parsed_html = BeautifulSoup(r.content, "html.parser")
                modscag_url_fn = parsed_html.findAll(text=re.compile('%s.*snow_fraction.tif' % tile))
            if not modscag_url_fn:
                print("Unable to fetch MODSCAG for %s" % dt)
            else:
                #Now extract actual tif filenames to fetch from html
                parsed_html = BeautifulSoup(r.content, "html.parser")
                #Fetch all tiles
                modscag_url_fn = parsed_html.findAll(text=re.compile('%s.*snow_fraction.tif' % tile))
                if modscag_url_fn:
                    modscag_url_fn = modscag_url_fn[0]
                    modscag_url = os.path.join(modscag_url_base, modscag_url_fn)
                    print(modscag_url)
                    modscag_fn = os.path.join(outdir, os.path.split(modscag_url_fn)[-1])
                    if not os.path.exists(modscag_fn):
                        iolib.getfile2(modscag_url, auth=auth, outdir=outdir)
                    modscag_fn_list.append(modscag_fn)
        #Mosaic tiles - currently a hack
        if modscag_fn_list:
            cmd = ['gdalbuildvrt', '-vrtnodata', '255', out_vrt_fn]
            cmd.extend(modscag_fn_list)
#             print(cmd)
            subprocess.call(cmd, shell=False)
            out_vrt_fn_list.append(out_vrt_fn)
    return out_vrt_fn_list

def proc_modscag(fn_list, extent=None, t_srs=None):
    """Process the MODSCAG products for full date range, create composites and reproject
    """
    #Use cubic spline here for improved upsampling
    stack_fn = os.path.splitext(fn_list[0])[0] + '_' + os.path.splitext(os.path.split(fn_list[-1])[1])[0] + '_stack_%i' % len(fn_list)
    
    out_fns = ['_count.tif', '_max.tif', '_min.tif', '_med.tif']
    out_fns = [stack_fn + fn for fn in out_fns]

    # Don't do this if the last stack fn exists
    if not os.path.exists(out_fns[-1]):
        #Create stack here - no need for most of pygeotools.lib.malib stack machinery, just make 3D array
        #Mask values greater than 100% (clouds, bad pixels, etc)
        print("\n ====== PROCESSING TILES ====== ")
        ds_list = warplib.memwarp_multi_fn(fn_list, res='min', extent=extent, t_srs=t_srs, r='cubicspline')
        ma_stack = np.ma.array([np.ma.masked_greater(iolib.ds_getma(ds), 100) for ds in np.array(ds_list)], dtype=np.uint8)

        stack_count = np.ma.masked_equal(ma_stack.count(axis=0), 0).astype(np.uint8)
        stack_count.set_fill_value(0)
        stack_min = ma_stack.min(axis=0).astype(np.uint8)
        stack_min.set_fill_value(0)
        stack_max = ma_stack.max(axis=0).astype(np.uint8)
        stack_max.set_fill_value(0)
        stack_med = np.ma.median(ma_stack, axis=0).astype(np.uint8)
        stack_med.set_fill_value(0)
        
        stacks = [stack_count, stack_max, stack_min, stack_med]
        
        for stack, out_fn in zip(stacks, out_fns):
            iolib.writeGTiff(stack, out_fn, ds_list[0])

        ds = gdal.Open(out_fn)
        return ds

def getparser():
    ex_str = "Example for Western CONUS: `get_modscag.py -date 20180601 -te '-883498 -1259670 1012222 775898' -proj4 '+proj=aea +lat_1=36 +lat_2=49 +lat_0=43 +lon_0=-115 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs'`"
    parser = argparse.ArgumentParser(description="Identify, download, and process MODSCAG fSCA products to match an input raster", epilog=ex_str)
    parser.add_argument('-date', default=None, help='By default, date is extracted from input raster filename. Use this override or specify arbitrary timestamp (format: YYYYMMDD)')
    parser.add_argument('-datadir', default=os.getcwd(), help='Directory to store intermediate products (default: %(default)s)')
    parser.add_argument('-pad', type=int, default=7, help='Combine data from this many days before and after target date (default: %(default)s)')
    parser.add_argument('-fn', type=str, default=None, help='Raster filename to match (e.g., YYYYMMDD_raster.tif)')
    parser.add_argument('-te', type=str, default=None, help='Extent as a string of 4 floats')
    parser.add_argument('-proj4', type=str, default=None, help='Proj4 string for output projection')
    return parser

def check_args(args=None, fn=None, date=None, datadir=os.getcwd(), pad_days=7):
    ''' Check input arguments'''
    
    modscag_min_dt=datetime(2000,2,24) # earliest MODSCAG timestamp
    
    if args is not None:
        datadir = args.datadir
        fn = args.fn
        pad_days=args.pad
        te=args.te
        proj4=args.proj4
        date=args.date
    if fn is not None:
        print("Output will match input file: %s" % fn)
        ds = gdal.Open(fn)
        #Extract timestamp from input filename
        dt = timelib.fn_getdatetime(fn)
    elif te is not None and proj4 is not None:
        from osgeo import osr
        t_srs = osr.SpatialReference()
        t_srs.ImportFromProj4(proj4)
        te = list(map(float, te.split()))
        #Assume MODIS res is 500 m
        tr = 500
        print("Output will have user-specified projection and extent")
        ds = geolib.mem_ds(tr, te, t_srs)
    else:
        sys.exit("Must specify an input filename or extent/proj")

    #If date is specified, extract timestamp
    if date is not None:
        dt = timelib.fn_getdatetime(date)
    if dt is None:
        sys.exit("Must provide a fn with timestamp or specify date")
    if dt < modscag_min_dt:
        sys.exit("Raster timestamp (%s) is before earliest MODSCAG timestamp (%s)" % (dt, modscag_min_dt))
    
    return datadir, fn, pad_days, ds, dt
   
def run_tiles(args=None, fn=None, date=None):
    '''Execute code to fetch and process tiles given inputs (either parser args or fn and date)'''
    if args is not None:
        datadir, fn, pad_days, ds, dt = check_args(args)
    elif (fn is not None) & (date is not None):
        datadir, fn, pad_days, ds, dt = check_args(fn=fn, date=date)
    else:
        sys.exit("Missing input arguments or input fn/date")
        
    # Make directories
    if not os.path.exists(datadir):
        os.makedirs(datadir)
        
    # This directory will store final MODIS products
    modscag_outdir = os.path.join(datadir, 'modscag')
    if not os.path.exists(modscag_outdir):
        os.makedirs(modscag_outdir)

    # Get MODSCAG products for raster timestamp
#     tile_list=('h08v04', 'h09v04', 'h10v04', 'h08v05', 'h09v05') #These tiles cover CONUS
    tile_list = get_modis_tile_list(ds)
    print("\nMODSCAG tiles:", tile_list)    

    modscag_fn_list = get_modscag(dt, modscag_outdir, tile_list, pad_days)
    if modscag_fn_list:
        modscag_ds = proc_modscag(modscag_fn_list, extent=ds, t_srs=ds)

        print("\n ====== WRITING TO FILE ====== ")        
        out_fn_base = os.path.splitext(fn)[0]
        
        #Write out at original resolution
        out_fn = out_fn_base +'_modscag_fSCA.tif'
        if not os.path.exists(out_fn):
            modscag_perc = iolib.ds_getma(modscag_ds)
            print("Writing out %s" % out_fn)
            iolib.writeGTiff(modscag_perc, out_fn, src_ds=modscag_ds)
        else:
            print("File already exists")

        #Warp to match input raster
        out_fn = out_fn_base +'_modscag_fSCA_warp.tif'
        if not os.path.exists(out_fn):
            #Note: use cubicspline here to avoid artifacts with negative values
            ds_out = warplib.memwarp_multi([modscag_ds,], res=ds, extent=ds, t_srs=ds, r='cubicspline')[0]            
            #Write out warped version
            modscag_perc = iolib.ds_getma(ds_out)
            print("Writing out %s" % out_fn)            
            iolib.writeGTiff(modscag_perc, out_fn, src_ds=ds_out)
        else:
            print("Warped version exists")
    
def main():
    parser = getparser()
    args = parser.parse_args()
    run_tiles(args)     # Check arguments, make directory paths and get and process tiles 
        
if __name__ == "__main__":
    main()